name: CI/CD Pipeline # Nome do workflow

on:
  push:
    branches: [main] # Executa em push na branch main
  pull_request:
    branches: [main] # Executa em pull request na branch main

jobs:
  build:
    runs-on: ubuntu-latest # Usa máquina virtual Ubuntu mais recente

    services:
      postgres: # Serviço de banco de dados PostgreSQL
        image: postgres:14 # Imagem Docker do PostgreSQL versão 14
        env:
          POSTGRES_USER: postgres # Usuário do banco
          POSTGRES_PASSWORD: postgres # Senha do banco
          POSTGRES_DB: blog # Nome do banco
        ports: ['5432:5432'] # Mapeia porta do banco
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_USER: postgres # Variável de ambiente: usuário do banco
      DB_HOST: localhost # Host do banco
      DB_DATABASE: blog # Nome do banco
      DB_PASSWORD: postgres # Senha do banco
      DB_PORT: 5432 # Porta do banco

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4 # Faz checkout do código fonte

    - name: Instalação do Node.js
      uses: actions/setup-node@v3 # Instala Node.js
      with:
        node-version: '18' # Versão do Node.js

    - name: Instalação de dependências
      run: npm install # Instala dependências do projeto

    - name: Aguardando o banco PostgreSQL subir
      # Aguarda o banco PostgreSQL estar pronto antes de executar os testes
      run: |
        until pg_isready -h localhost -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done # Aguarda o banco PostgreSQL estar pronto

    - name: Corrige permissões do Jest
      run: chmod +x ./node_modules/.bin/jest

    - name: Run migrations
      run: npx sequelize-cli db:migrate

    - name: Execução de testes automatizados
      run: npm test # Executa os testes automatizados

    - name: Geração do relatório de cobertura de testes
      run: npm run coverage # Gera relatório de cobertura de código
      
    - name: Estabelecendo conexão SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Entrando no VPS e fazendo deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd /home/ubuntu/devtools/blog-api &&
          if [ ! -d ".git" ]; then
            git clone https://github.com/leograva/blog-api.git .;
          else
            git pull origin main;
          fi
          docker compose pull
          docker compose up -d --build- name: Run migrations
  run: npx sequelize-cli db:migrate
        EOF